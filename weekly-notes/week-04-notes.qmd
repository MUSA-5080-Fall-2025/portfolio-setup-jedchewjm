---
title: "Week 4 Notes - Spatial Data & GIS"
date: "2025-09-29"
---

## Key Concepts Learned

-   **Spatial Data Fundamentals**
    -   Vector data model and sf objects

    -   ESRI Shapefile format: `.shp` (geometry – lat/long); `.dbf` (attribute); `.sbx` (binary spatial index file)
-   **Spatial Operations**
    -   Spatial subsetting and filtering

    -   Spatial joins and relationships

    -   Measuring distances and areas
-   **Geometry Operations**
    -   Buffers, intersections, and unions

    -   Spatial aggregation
-   **Coordinate Systems**
    -   Understanding projections

    -   Transforming between coordinate systems
-   **Spatial Analysis Workflow**
    -   **Load data** → Get spatial boundaries and attribute data
    -   **Check projections** → Transform to appropriate CRS
    -   **Join datasets** → Combine spatial and non-spatial data
    -   **Spatial operations** → Buffers, intersections, distance calculations
    -   **Aggregation** → Summarize across spatial units
    -   **Visualization** → Maps and charts
    -   **Interpretation** → Policy recommendations

## Coding Techniques

**Read Spatial Data:** `st_read`

**Spatial Subsetting: extract features based on spatial relationships**

-   Which counties border Allegheny? → `st_touches` looks for neighbors

-   Which tracts are IN Allegheny? → `st_within`

-   Which tracts overlap a metro area? → `st_intersects` includes the reference feature itself

-   If no `.predicate` specified, uses `st_intersects`

![](images/clipboard-3051935903.png)

```{r predicate, eval = FALSE }
# Key Functions
st_filter(data_to_filter, reference_geometry, .predicate = relationship)

# .predicate = ""
st_intersects()
st_touches()
st_within()
```

**Checking and Setting CRS**

-   To simply check current CRS `st_crs(pa_counties)`

-   To set CRS (ONLY if missing) `pa_counties <- st_set_crs(pa_counties, 4326)`

```{r crs, eval = FALSE}
# st_transform
census_tracts <- census_tracts %>%
  st_transform(st_crs(pa_counties))
```

**Plot Maps**

```{r plots, eval = FALSE}
ggplot(pa_counties) +
  geom_sf() +
  theme_void()
```

**Spatial Joins**

```{r joins, eval = FALSE}
tracts_with_counties <- census_tracts %>%
  st_join(pa_counties)
```

**Area Calculations**

-   The dot (.) is a placeholder that represents the data being passed through the pipe

-   In the code example below, the dot (.) refers to `pa_counties`

```{r areas, eval = FALSE}
# Convert to Sq Km
pa_counties <- pa_counties %>%
  mutate(
    area_sqkm = as.numeric(st_area(.)) / 1000000
  )
```

**Distance and Buffers**

-   buffer units depend on coordinate reference system

```{r buffers, eval= FALSE}
# 10km buffer around all hospitals
hospitals_projected <- hospitals %>%
  st_transform(crs = 3365)
st_crs(hospitals_projected)

hospital_buffers <- hospitals_projected %>%
  st_buffer(dist = 32808.4)  # 10,000 meters = 32808.4 feet

ggplot(hospital_buffers)+
  geom_sf()+
  theme_void()

# Different buffer sizes by hospital type (this is hypothetical, we don't have that column!)
hospital_buffers <- hospitals %>%
  mutate(
    buffer_size = case_when(
      type == "Major Medical Center" ~ 15000,
      type == "Community Hospital" ~ 10000,
      type == "Clinic" ~ 5000
    )
  ) %>%
  st_buffer(dist = .$buffer_size)
```

## Questions & Challenges

-   

## Connections to Policy

-   

## Reflection

-   
