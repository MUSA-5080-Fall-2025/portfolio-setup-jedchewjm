---
title: "Data Axle - Businesses in Sharswood"
subtitle: "URBS 4000: Urban Studies Thesis"
author: "Jed Chew"
date: today
format: 
  html:
    code-fold: false
    toc: true
    toc-location: left
    theme: cosmo
    embed-resources: true
execute:
  warning: false
  message: false
editor: 
  markdown: 
    wrap: 80
---

## Project Title: Mixed by Design 

### *A Case Study of the Philadelphia Housing Authority's (PHA) Choice Neighborhoods Redevelopment of Sharswood*

For my Urban Studies thesis, I am researching the PHA's Choice Neighborhoods
redevelopment of the Sharswood neighborhood in North Philadelphia. I have two
main research questions about the process and outcome of this redevelopment:

\(1\) the **process** by which the PHA aligned the politics, finance, and design
for the redevelopment of Sharswood; and 

\(2\) the early redevelopment **outcomes** relative to the Choice Neighborhoods
Initiative (CNI) vision of mixed-partners, mixed-use, and mixed-income

## Part 1: Raw Data from Data Axle

**Data Axle Reference Solutions** (formerly ReferenceUSA and Infogroup) is a big
data, analytics, and marketing services provider that delivers best in class
data-driven, customer-centric technology solutions. It offers two main types of
data:

-   **Residential Historic Data:** Analyze community growth and general
    population differences.

-   **Historic Business Data:** Analyze market trends, economic growth, or
    specific industries. Access categories including Company Name, Geocodes,
    SIC/NAICS codes, Census Tracts.

I retrieved my raw data files from Data Axle through Penn Libraries and Wharton
Research and Data Services (WRDS) on October 15, 2025. The interface of Data
Axle is shown below.

![](images/clipboard-3282527950.png){width="887"}

### Record Types

-   **Verified Records:** have been verified by DataAxle staff through various
    compilation processes including phone validation

-   **Unverified Records:** separate database from verified records because of
    one of the following three reasons:

    -   records appear within data sources but have yet to be fully verified

    -   partial information is contained in the record, but not all data
        elements are present to be considered 'verified' at the point of data
        retrieval

    -   addresses are unverified (e.g. a business may have moved)

#### Step 1: Load Raw Data as csv files

-   DataAxle's U.S. Businesses Data Dictionary

-   Verified Businesses in Sharswood Neighborhood

-   Unverified Businesses in Sharswood Neighborhood

-   Philadelphia census tracts and neighborhood boundaries

```{r, echo = FALSE, include = FALSE}
# Load required packages
library(tidyverse)
library(tidycensus)
library(janitor)
library(sf)
library(tigris)
library(scales)
library(patchwork)
library(RColorBrewer)
library(units)
library(knitr)
library(caret)

# Set Census API key
census_api_key("fe841b7ef0aa73d9579f0517bd1c8f26d33c789b")

# Get working directory
getwd()
```

```{r}
# Load Data Axle Data
datadict <- read_csv("data/Data_Dict.csv")
head(datadict)

verified <- read_csv("data/Sharswood_Verified_Biz.csv")
verified

unverified1 <- read_csv("data/Sharswood_Unverified_Biz_Pg1to10.csv")
unverified1

unverified2 <- read_csv("data/Sharswood_Unverified_Biz_Pg1to10.csv")
unverified2

unverified_combined <- bind_rows(unverified1, unverified2)
glimpse(unverified_combined)
write_csv(unverified_combined, "data/Sharswood_Unverified_Biz_Combined.csv")
```

```{r}
# rename column headings
verified <- verified |> clean_names()
unverified_combined <- unverified_combined |> clean_names()

# filter out small businesses with irrelevant SIC Codes
drop_SIC <- c("Atm-Automated Teller Machines", "Schools", "Churches", "Nonclassified Establishments", "Real Estate Management", "Townhouses", "Mailing & Shipping Kiosks")

verified_clean <- verified |>
  filter(!primary_sic_description %in% drop_SIC) |>
  select(company_name, address, latitude, longitude, census_block_group, primary_sic_code, primary_sic_description, primary_naics, primary_naics_description, 
         years_in_database, location_type, location_employee_size_range, square_footage, record_type)
verified_clean

unverified_clean <- unverified_combined |>
  filter(!primary_sic_description %in% drop_SIC) |>
  select(company_name, address, latitude, longitude, census_block_group, primary_sic_code, primary_sic_description, primary_naics, primary_naics_description, 
         years_in_database, location_type, location_employee_size_range, square_footage, record_type)
unverified_clean
```

```{r, results = 'hide'}
# Load spatial data
census_tracts <- tracts(state = "PA", county = "Philadelphia", year = 2020, class = "sf", cb = TRUE, progress = FALSE)
block_grps <- block_groups(state = "PA", county = "Philadelphia", year = 2020, class = "sf",cb = TRUE, progress = FALSE)

# Standardize CRS
```

```{r}
# Check that all data loaded correctly
ggplot(census_tracts) +
  geom_sf() +
  labs(title = "Philadelphia Census Tracts") +
  theme_void()

ggplot(block_grps) +
  geom_sf() +
  labs(title = "Philadelphia Block Groups") +
  theme_void()
```

--------------------------------------------------------------------------------

#### Step 2: Get Philadelphia Demographic Data using `tidycensus`

```{r, eval = FALSE}
# Load all available variables for ACS 5-year 2022
acs_vars_2022 <- load_variables(2022, "acs5", cache = TRUE)
```

```{r, results = 'hide'}
# Helper Variables for Summing Population Values for Children aged 5-19
child_pop = c("B01001_004", "B01001_005", "B01001_006", "B01001_007", 
                "B01001_028", "B01001_029", "B01001_030", "B01001_031")


# Helper Variable for Summing Population Values for Elderly Population
elderly_pop = c("B01001_020", "B01001_021", "B01001_022", "B01001_023", 
                "B01001_024", "B01001_025", 
                "B01001_044", "B01001_045", "B01001_046", 
                "B01001_047", "B01001_048", "B01001_049")

# Get tract-level demographic data from 2022 ACS 5-Yr Estimates for Philadelphia
phl_tract_data <- get_acs(
  geography = "tract",
  variables = c(
    total_pop = "B01003_001",
    child_pop = child_pop,
    elderly_pop = elderly_pop,
    median_income = "B19013_001",
    poverty = "B17001_001",
    White     = "B03002_003",
    Black     = "B03002_004",
    Hispanic  = "B03002_012"
  ),
  state = "PA",
  county = "Philadelphia",
  year = 2022,
  survey = "acs5",
  output = "wide",
  geometry = TRUE
)

# Clean the county names to remove state name and "County" 
phl_tract_clean <- phl_tract_data |> 
  separate(
    NAME, 
    into = c("tract_name", "county_name", "state_name"), 
    sep = "; "
  ) |> 
  mutate(
    tract_name = str_remove(tract_name, "Census Tract "),
    county_name = str_remove(county_name, " County")
  )

phl_tract_summary <- phl_tract_clean |>
  mutate(
    elderly_popE = rowSums(across(matches("^elderly_pop\\d+E$")), na.rm = TRUE),
    # for MOE, ACS guidance is to combine by quadrature
    elderly_popM = sqrt(rowSums(across(matches("^elderly_pop\\d+M$"))^2, na.rm = 
                                  TRUE)),
    pct_elderly = round((elderly_popE / total_popE) *100, 2),
    child_popE = rowSums(across(matches("^child_pop\\d+E$")), na.rm = TRUE),
    child_popM = sqrt(rowSums(across(matches("^child_pop\\d+M$"))^2, na.rm = 
                                  TRUE)),
    pct_child = round((child_popE/total_popE) * 100, 2),
  ) |>
  select(GEOID, tract_name, county_name, total_popE, median_incomeE, elderly_popE, 
         elderly_popM, pct_elderly, child_popE, child_popM, pct_child)
```

--------------------------------------------------------------------------------

#### Step 3: Make Data Axle dataset Spatial

```{r}
# Convert Data Axle dataset to sf object
verified.sf <- verified_clean |> 
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) |> # WGS 84 
  st_transform(2272) # PA State Plane (in US Survey Feet)

unverified.sf <- unverified_clean |> 
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) |> 
  st_transform(2272)
```

**Join Data Axle Shapefiles to Philadelphia Census Tracts**

```{r}
# Filter Census Tracts for Sharswood
sharswood_tract_sf <- phl_tract_summary |> 
  filter(tract_name == c("138", "139"))

ggplot(sharswood_tract_sf) +
  geom_sf() +
  theme_void()

sharswood_tract <- sharswood_tract_sf |> 
  st_drop_geometry()
sharswood_tract
```

```{r}
# Filter Block Groups for Sharswood
ids <- c("421010138001","421010138002","421010139001",
         "421010139002","421010139003")

sharswood_bg <- block_grps |>
 filter(GEOID %in% ids)

ggplot(sharswood_bg) +
  geom_sf() +
  theme_void()
```

```{r}
# Join Shapefiles and Plot Map
sharswood_bg <- st_transform(sharswood_bg, st_crs(verified.sf))

ggplot() +
  geom_sf(data = sharswood_bg, fill = "gray97", color = "gray50", linewidth = 0.3) +
  geom_sf(data = verified.sf, aes(fill = primary_sic_description), shape = 21, size = 2, alpha = 0.9) +
  labs(
    title = "Verified Businesses in Sharswood — Data Axle",
    subtitle = "PA South State Plane (ftUS)",
    caption = paste0("CRS: ", st_crs(block_grps)$input %||% st_crs(block_grps)$epsg)
  ) +
  theme_void()

ggplot() +
  geom_sf(data = sharswood_bg, fill = "gray97", color = "gray50", linewidth = 0.3) +
  geom_sf(data = unverified.sf, shape = 21, size = 2, fill = "black", alpha = 0.9) +
  labs(
    title = "Unverified Businesses in Sharswood — Data Axle",
    subtitle = "PA South State Plane (ftUS)",
    caption = paste0("CRS: ", st_crs(block_grps)$input %||% st_crs(block_grps)$epsg)
  ) +
  theme_void()
```

--------------------------------------------------------------------------------

#### Step 4: Map Businesses to Home Parcels

--------------------------------------------------------------------------------

#### Step 5: Create Summary Table

--------------------------------------------------------------------------------

## Part 2: Comprehensive Visualization

```{r}

```

--------------------------------------------------------------------------------

## Part 3: Open Data Philly

Choose your own additional spatial dataset and conduct a supplementary analysis.

**My Chosen Question: School Access and School Choice in City of Philadelphia**

-   **Data**: Schools, Census Tracts (race/income demographics)
    -   School Parcels: <https://opendataphilly.org/datasets/schools-parcels/> –
        parcel location of schools in the City of Philadelphia with attribute
        information for address, grade level, type, and status
    -   Schools: <https://opendataphilly.org/datasets/schools/> – points
        identifying public schools, charter schools, many private schools,
        school annexes, and athletic fields and facilities
-   **Question:** "Is lack of school access associated with vulnerable
    populations?"
-   **Operations:**
    -   Clean datasets
    -   Distance to nearest school
    -   Buffer schools (10-minute walk = 0.5 mile)
    -   Compare types and enrollment of schools by demographics
