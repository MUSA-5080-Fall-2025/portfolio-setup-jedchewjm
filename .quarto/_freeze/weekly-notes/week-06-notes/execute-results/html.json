{
  "hash": "4cd224442c263afc5f71c8ae7a921812",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 6 Notes - Spatial ML and Advanced Regression\"\ndate: \"2025-10-13\"\n---\n\n## Key Concepts Learned\n\n### Types of Variables\n\n**Continuous:** square feet, age of house, income levels, distance to downtown\n\n**Categorical:** neighborhood, school district, building type, has garage (binary Y/N)\n\n### Limitations of Models using only Baseline Indicators \n\n![](images/clipboard-488756333.png){width=\"990\"}\n\n### Fixed Effects\n\n-   Definition: Categorical variables that capture all unmeasured characteristics of a group\n\n-   Powerful but they’re a *black box* \n\n-   Neighborhoods bundle many unmeasured factors (e.g. school districts, job access, amenities, \"cool factor\")\n\n### **Three Approaches to Spatial Features**\n\n1.  Buffer Aggregation\n2.  kNN\n3.  Distance to Specific Points\n\n### Tips for Success\n\n![](images/clipboard-3819921299.png){width=\"601\"}\n\n------------------------------------------------------------------------\n\n## Coding Techniques\n\n-   **Make Data with X/Y Coordinates Spatial**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert boston data to sf object\nboston.sf <- boston |> \n  st_as_sf(coords = c(\"Longitude\", \"Latitude\"), crs = 4326) |> \n  st_transform('ESRI:102286')  # MA State Plane (feet)\n\n# Spatial join: Assign each house to its neighborhood\nboston.sf <- boston.sf |> \n  st_join(nhoods, join = st_intersects)\n\n# Check results\nboston.sf |> \n  st_drop_geometry() |> \n  count(name) |> \n  arrange(desc(n))\n```\n:::\n\n\n-   **Add Dummy/Categorical Variables (e.g. Neighborhoods)**\n\nThe *n-1 rule*: One neighborhood is automatically chosen as the *reference category* (omitted)! R picks the first alphabetically unless you specify otherwise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboston.sf <- boston.sf |> \n  mutate(name = as.factor(name))\n\n# Fit model with neighborhood fixed effects\nmodel_neighborhoods <- lm(SalePrice ~ LivingArea + name, data = boston.sf)\n```\n:::\n\n\n-   **Interaction Effects**\n\n![](images/clipboard-1292342269.png)\n\n![](images/clipboard-2183883732.png)\n\n![](images/clipboard-3566884761.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define wealthy neighborhoods based on median prices\nwealthy_hoods <- c(\"Back Bay\", \"Beacon Hill\", \"South End\", \"Bay Village\")\n\n# Create binary indicator\nboston.sf <- boston.sf |> \n  mutate(\n    wealthy_neighborhood = ifelse(name %in% wealthy_hoods, \"Wealthy\", \"Not Wealthy\"),\n    wealthy_neighborhood = as.factor(wealthy_neighborhood)\n  )\n\n# Check the split\nboston.sf |> \n  st_drop_geometry() |> \n  count(wealthy_neighborhood)\n```\n:::\n\n\n-   **Polynomials – e.g. Square Age Variable because of U-Shaped Effect**\n    -   New Houses (0-20 years): modern amenities, high value, steep depreciation\n    -   Middle-Aged (20-80 years): wear and tear, lowest value\n    -   Historic/Vintage (80+ years): historic districts, rising value, \"vintage premium\"\n\n![](images/clipboard-1141008675.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate age from year built\nboston.sf <- boston.sf |> \n  mutate(Age = 2025 - YR_BUILT) |>  filter(Age <2000)\n\n# Check the distribution of age\nsummary(boston.sf$Age)\n\n# Add Polynomial Term - use I(Age^2) for Quadratic Model\nmodel_age_quad <- lm(SalePrice ~ Age + I(Age^2) + LivingArea, data = boston.sf)\nsummary(model_age_quad)$coef\n\n# Compare Linear vs Quadratic Model in terms of R-squared\nsummary(model_age_quad)$r.squared\n\n# Check Residual Plot\npar(mfrow = c(1, 2))\n\n# Linear model residuals\nplot(fitted(model_age_linear), residuals(model_age_linear),\n     main = \"Linear Model Residuals\",\n     xlab = \"Fitted Values\", ylab = \"Residuals\")\nabline(h = 0, col = \"red\", lty = 2)\n\n# Quadratic model residuals  \nplot(fitted(model_age_quad), residuals(model_age_quad),\n     main = \"Quadratic Model Residuals\",\n     xlab = \"Fitted Values\", ylab = \"Residuals\")\nabline(h = 0, col = \"red\", lty = 2)\n```\n:::\n\n\n-   **Buffer Aggregation**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboston.sf <- boston.sf |> \n  mutate(\n    crimes.Buffer = lengths(st_intersects(\n      st_buffer(geometry, 660),\n      crimes.sf\n    )),\n    crimes_500ft = lengths(st_intersects(\n      st_buffer(geometry, 500),\n      crimes.sf\n    ))\n  )\n```\n:::\n\n\n-   **kNN**\n    -   The kNN feature with the strongest correlation tells us the relevant “zone of influence” for crime perception\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distance matrix (houses to crimes)\ndist_matrix <- st_distance(boston.sf, crimes.sf)\n\n# Function to get mean distance to k nearest neighbors\nget_knn_distance <- function(dist_matrix, k) {\n  apply(dist_matrix, 1, function(distances) {\n    # Sort and take first k, then average\n    mean(as.numeric(sort(distances)[1:k]))\n  })\n}\n\n# Create multiple kNN features\nboston.sf <- boston.sf %>%\n  mutate(\n    crime_nn1 = get_knn_distance(dist_matrix, k = 1),\n    crime_nn3 = get_knn_distance(dist_matrix, k = 3),\n    crime_nn5 = get_knn_distance(dist_matrix, k = 5)\n  )\n\n# Check results\nsummary(boston.sf %>% st_drop_geometry() %>% select(starts_with(\"crime_nn\")))\n\n# Which k value correlates most with price?\nboston.sf %>%\n  st_drop_geometry() %>%\n  select(SalePrice, crime_nn1, crime_nn3, crime_nn5) %>%\n  cor(use = \"complete.obs\") %>%\n  as.data.frame() %>%\n  select(SalePrice)\n```\n:::\n\n\n-   **Distance**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define downtown Boston (Boston Common: 42.3551° N, 71.0656° W)\ndowntown <- st_sfc(st_point(c(-71.0656, 42.3551)), crs = \"EPSG:4326\") %>%\n  st_transform('ESRI:102286')\n\n# Calculate distance from each house to downtown\nboston.sf <- boston.sf |> \n  mutate(\n    dist_downtown_ft = as.numeric(st_distance(geometry, downtown)),\n    dist_downtown_mi = dist_downtown_ft / 5280\n  )\n\n# Summary\nsummary(boston.sf$dist_downtown_mi)\n```\n:::\n\n\n-   **All Spatial Features Together**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspatial_summary <- boston.sf |> \n  st_drop_geometry() |> \n  select(crimes.Buffer, crimes_500ft, crime_nn3, dist_downtown_mi) |>\n  summary()\nspatial_summary\n```\n:::\n\n\n**Neighborhood Fixed Effects**\n\n-   Fixed Effects = categorical variables that capture all unmeasured characteristics of a group\n-   R creates a dummy for each neighborhood automatically\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add neighborhood fixed effects\nreg5 <- lm(\n  SalePrice ~ LivingArea + Age + \n              crimes_500ft + \n              parks_nn3 + \n              as.factor(name),  # FE\n  data = boston.sf\n)\n```\n:::\n\n\n**Cross Validation Workflow**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncategory_check <- boston.sf |> \n  st_drop_geometry() |> \n  count(name) |> \n  arrange(n)\n\nprint(category_check)\n```\n:::\n\n\n-   Categories with n \\< 10 for categorical variables will likely cause CV problems\n\n![](images/clipboard-1022214413.png){width=\"263\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Check category sizes\nboston.sf %>%\n  st_drop_geometry() %>%\n  count(name) %>%\n  arrange(n) %>%\n  print()\n\n# 2. Group small neighborhoods if needed\nboston.sf <- boston.sf %>%\n  add_count(name) %>%\n  mutate(\n    name_cv = if_else(n < 10, \"Small_Neighborhoods\", as.character(name)),\n    name_cv = as.factor(name_cv)\n  )\n\n# 3. Set up CV\nctrl <- trainControl(method = \"cv\", number = 10)\n\n# 4. Use grouped neighborhoods in ALL models with FE\nmodel <- train(\n  SalePrice ~ LivingArea + Age + crimes_500ft + as.factor(name_cv),\n  data = boston.sf,\n  method = \"lm\",\n  trControl = ctrl\n)\n\n# 5. Report\ncat(\"10-fold CV RMSE:\", round(model$results$RMSE, 0), \"\\n\")\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## Questions & Challenges\n\n-   None for this week\n\n## Connections to Policy\n\n-   Market Segmentation: property tax assessments should account for neighborhood-specific valuation. Housing assistance needs vary dramatically by area.\n\n## Reflection\n\n-   Fixed Effects are powerful but they’re a **black box**. When I work on housing policy and housing markets, we often describe neighborhood fixed effects but I have never really quantified them.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}