{
  "hash": "b6e8d8070420441df63197ea0e81bfdf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 6 Notes - Spatial ML and Advanced Regression\"\ndate: \"2025-10-13\"\n---\n\n## Key Concepts Learned\n\n### Types of Variables\n\n**Continuous:** square feet, age of house, income levels, distance to downtown\n\n**Categorical:** neighborhood, school district, building type, has garage (binary Y/N)\n\n### Fixed Effects\n\n-   Definition: Categorical variables that capture all unmeasured characteristics of a group\n\n-   Powerful but they’re a *black box* \n\n-   Neighborhoods bundle many unmeasured factors (e.g. school districts, job access, amenities, \"cool factor\")\n\n## Coding Techniques\n\n-   **Make Data with X/Y Coordinates Spatial**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert boston data to sf object\nboston.sf <- boston |> \n  st_as_sf(coords = c(\"Longitude\", \"Latitude\"), crs = 4326) |> \n  st_transform('ESRI:102286')  # MA State Plane (feet)\n```\n:::\n\n\n-   **Add Dummy/Categorical Variables (e.g. Neighborhoods)**\n\nThe n-1 rule: One neighborhood is automatically chosen as the *reference category* (omitted)! R picks the first alphabetically unless you specify otherwise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboston.sf <- boston.sf |> \n  mutate(name = as.factor(name))\n\n# Fit model with neighborhood fixed effects\nmodel_neighborhoods <- lm(SalePrice ~ LivingArea + name, data = boston.sf)\n```\n:::\n\n\n-   **Interaction Effects**\n\n![](images/clipboard-2183883732.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define wealthy neighborhoods based on median prices\nwealthy_hoods <- c(\"Back Bay\", \"Beacon Hill\", \"South End\", \"Bay Village\")\n\n# Create binary indicator\nboston.sf <- boston.sf %>%\n  mutate(\n    wealthy_neighborhood = ifelse(name %in% wealthy_hoods, \"Wealthy\", \"Not Wealthy\"),\n    wealthy_neighborhood = as.factor(wealthy_neighborhood)\n  )\n\n# Check the split\nboston.sf %>%\n  st_drop_geometry() %>%\n  count(wealthy_neighborhood)\n```\n:::\n\n\n-   **Polynomials – e.g. Square Age Variable**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Quadratic model (Age²)\nmodel_age_quad <- lm(SalePrice ~ Age + I(Age^2) + LivingArea, data = boston.sf)\nsummary(model_age_quad)$coef\n\n# Check Residual Plot\npar(mfrow = c(1, 2))\n\n# Linear model residuals\nplot(fitted(model_age_linear), residuals(model_age_linear),\n     main = \"Linear Model Residuals\",\n     xlab = \"Fitted Values\", ylab = \"Residuals\")\nabline(h = 0, col = \"red\", lty = 2)\n\n# Quadratic model residuals  \nplot(fitted(model_age_quad), residuals(model_age_quad),\n     main = \"Quadratic Model Residuals\",\n     xlab = \"Fitted Values\", ylab = \"Residuals\")\nabline(h = 0, col = \"red\", lty = 2)\n```\n:::\n\n\n-   **kNN**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate distance matrix (houses to crimes)\ndist_matrix <- st_distance(boston.sf, crimes.sf)\n\n# Function to get mean distance to k nearest neighbors\nget_knn_distance <- function(dist_matrix, k) {\n  apply(dist_matrix, 1, function(distances) {\n    # Sort and take first k, then average\n    mean(as.numeric(sort(distances)[1:k]))\n  })\n}\n\n# Create multiple kNN features\nboston.sf <- boston.sf %>%\n  mutate(\n    crime_nn1 = get_knn_distance(dist_matrix, k = 1),\n    crime_nn3 = get_knn_distance(dist_matrix, k = 3),\n    crime_nn5 = get_knn_distance(dist_matrix, k = 5)\n  )\n\n# Check results\nsummary(boston.sf %>% st_drop_geometry() %>% select(starts_with(\"crime_nn\")))\n\n# Which k value correlates most with price?\nboston.sf %>%\n  st_drop_geometry() %>%\n  select(SalePrice, crime_nn1, crime_nn3, crime_nn5) %>%\n  cor(use = \"complete.obs\") %>%\n  as.data.frame() %>%\n  select(SalePrice)\n```\n:::\n\n\n**Neighborhood Fixed Effects**\n\n-   R creates a dummy for each neighborhood automatically\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add neighborhood fixed effects\nreg5 <- lm(\n  SalePrice ~ LivingArea + Age + \n              crimes_500ft + \n              parks_nn3 + \n              as.factor(name),  # FE\n  data = boston.sf\n)\n```\n:::\n\n\n## Questions & Challenges\n\n-   \n\n## Connections to Policy\n\n-   \n\n## Reflection\n\n-   Fixed Effects - Black Box\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}