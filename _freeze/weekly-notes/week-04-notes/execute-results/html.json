{
  "hash": "b6a5b9bf5dcae6bd1828465dc2d3d448",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 4 Notes - Spatial Data & GIS\"\ndate: \"2025-09-29\"\n---\n\n## Key Concepts Learned\n\n-   **Spatial Data Fundamentals**\n    -   Vector data model and sf objects\n\n    -   ESRI Shapefile format: `.shp` (geometry – lat/long); `.dbf` (attribute); `.sbx` (binary spatial index file)\n-   **Spatial Operations**\n    -   Spatial subsetting and filtering\n\n    -   Spatial joins and relationships\n\n    -   Measuring distances and areas\n-   **Geometry Operations**\n    -   Buffers, intersections, and unions\n\n    -   Spatial aggregation\n-   **Coordinate Reference Systems (CRS)**\n    -   Understanding projections & transforming between CRS\n\n    -   **Geographic Coordinate Systems (GCS)** utilize lat/long coordinates with angular units in decimal degrees\n\n        -   *WGS84 (EPSG:4326):*GPS standard, global coverage, good for web mapping, data sharing\n\n    -   **Project Coordinate Systems (PCS)** utilize X/Y coordinates on a flat plane with units in metres/feet\n\n        -   *Web Mercator (EPSG:3857):* Web mapping standard, heavily distorts areas near poles\n\n        -   *State Plane / UTM zones:* local accuracy, different zones for different regions, optimized for specific geographic areas\n\n## Coding Techniques\n\n**Read Spatial Data:** `st_read`\n\n**Spatial Subsetting: extract features based on spatial relationships**\n\n-   Which counties border Allegheny? → `st_touches` looks for neighbors\n\n-   Which tracts are IN Allegheny? → `st_within`\n\n-   Which tracts overlap a metro area? → `st_intersects` includes the reference feature itself\n\n-   If no `.predicate` specified, uses `st_intersects`\n\n![](images/clipboard-3051935903.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Key Functions\nst_filter(data_to_filter, reference_geometry, .predicate = relationship)\n\n# .predicate = \"\"\nst_intersects()\nst_touches()\nst_within()\n```\n:::\n\n\n**Checking and Setting CRS**\n\n-   To simply check current CRS `st_crs(pa_counties)`\n\n-   To set CRS (ONLY if missing) `pa_counties <- st_set_crs(pa_counties, 4326)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# st_transform\ncensus_tracts <- census_tracts %>%\n  st_transform(st_crs(pa_counties))\n\n# Transform to Pennsylvania South State Plane (good for PA analysis)\npa_counties_projected <- pa_counties %>%   st_transform(crs = 3365)\n\n# Transform to Albers Equal Area (good for area calculations) \npa_counties_albers <- pa_counties %>%   st_transform(crs = 5070) `\n```\n:::\n\n\n**Plot Maps**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pa_counties) +\n  geom_sf() +\n  theme_void()\n```\n:::\n\n\n**Spatial Joins**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntracts_with_counties <- census_tracts %>%\n  st_join(pa_counties)\n```\n:::\n\n\n**Area Calculations**\n\n-   The dot (.) is a placeholder that represents the data being passed through the pipe\n\n-   In the code example below, the dot (.) refers to `pa_counties`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to Sq Km\npa_counties <- pa_counties %>%\n  mutate(\n    area_sqkm = as.numeric(st_area(.)) / 1000000\n  )\n```\n:::\n\n\n**Distance and Buffers**\n\n-   buffer units depend on coordinate reference system\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 10km buffer around all hospitals\nhospitals_projected <- hospitals %>%\n  st_transform(crs = 3365)\nst_crs(hospitals_projected)\n\nhospital_buffers <- hospitals_projected %>%\n  st_buffer(dist = 32808.4)  # 10,000 meters = 32808.4 feet\n\nggplot(hospital_buffers)+\n  geom_sf()+\n  theme_void()\n\n# Different buffer sizes by hospital type (this is hypothetical, we don't have that column!)\nhospital_buffers <- hospitals %>%\n  mutate(\n    buffer_size = case_when(\n      type == \"Major Medical Center\" ~ 15000,\n      type == \"Community Hospital\" ~ 10000,\n      type == \"Clinic\" ~ 5000\n    )\n  ) %>%\n  st_buffer(dist = .$buffer_size)\n\n# Use Unions to calculate what percentage of low-income tracts have access\naccess_summary <- low_income_tracts %>%\n  mutate(\n    has_access = st_intersects(., st_union(hospital_buffers), sparse = FALSE)\n  ) %>%\n  st_drop_geometry() %>%\n  summarize(\n    total_tracts = n(),\n    tracts_with_access = sum(has_access),\n    pct_with_access = (tracts_with_access / total_tracts) * 100\n  )\n\nprint(access_summary)\n```\n:::\n\n\n## Questions & Challenges\n\n-   No questions for this week\n\n## Connections to Policy\n\n-   **Spatial Policy Analysis Workflow**\n\n    -   **Load data** → Get spatial boundaries and attribute data\n    -   **Check projections** → Transform to appropriate CRS\n    -   **Join datasets** → Combine spatial and non-spatial data\n    -   **Spatial operations** → Buffers, intersections, distance calculations\n    -   **Aggregation** → Summarize across spatial units\n    -   **Visualization** → Maps and charts\n    -   **Interpretation** → Policy recommendations\n\n## Reflection\n\n-   I was surprised at how intuitive and quick it was to develop maps and visualizations using packages in R as compared to ArcGIS. I discussed this with Prof. Delmelle during Office Hours, and she shared that she has relied exclusively on R for the past two years after switching to a Macbook.\n\n-   While ArcGIS is still a useful tool and has many cool additional features such as StoryMaps or animations, I believe that R is the way forward for core data wrangling, visualization, and machine learning work.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}